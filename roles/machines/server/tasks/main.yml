---
- import_role: name=common
- import_role: name=pacsync
- import_role: name=systemd-timesyncd

- import_role: name=personal-repo
  vars: { server_path: "file:///srv/pkgs" }

# Bootstrap personal packages repo
- name: Install docker
  pacman: name=docker

- name: Ensure docker is enabled
  service: name=docker enabled=yes state=started

- name: Ensure personal packages repo directory exists
  file: path=/srv/pkgs state=directory

- name: Bootstrapping personal packages
  shell: |
    package="{{ item }}"
    cd "$(mktemp -d)"
    git clone https://github.com/EvanPurkhiser/PKGBUILDs.git .
    docker run --rm --name "makepkg-$package" -e EXPORT_PKG=1 -v "$PWD/$package":/pkg whynothugo/makepkg
    mv "$PWD/$package"/*.pkg.tar.xz /srv/pkgs && cd && rm -r "$OLDPWD"
  args:
    creates: /srv/pkgs/{{ item }}*.pkg.tar.xz
  notify:
  - sync personal repo database
  - sync pacman cache
  with_items:
  - media-center-automation
  - waitress-git
  - prolink-tools-git

# Flush handlers to ensure new personal packages are synced into the database
- meta: flush_handlers

# Setup ZFS repo
- name: Add arch ZFS repo
  copy: src=archzfs-repo dest=/etc/pacman.d

- name: Include archzfs repo in pacman.conf
  lineinfile: dest=/etc/pacman.conf line="Include = /etc/pacman.d/archzfs-repo"
  notify: sync pacman cache

- name: Install required packages
  pacman:
    name:
    - archzfs-linux
    - bash-completion
    - dhcpcd
    - dnsmasq
    - mosquitto
    - neovim
    - nfs-utils
    - nginx
    - prolink-tools-git
    - rclone
    - rsync
    - transmission-cli
    - waitress-git
    - wget

    # Required for encrypting the transmission basic auth password
    - python-passlib
    # Required for docker managment
    - python-docker

# Configure network
- name: Disable default network configuration
  file: path=/etc/systemd/network/80-container-host0.network state=link src=/dev/null

- name: Ensure systemd-networkd is enabled
  service: name=systemd-networkd state=started enabled=yes

- name: Ensure hosts file
  copy: src=hosts dest=/etc/

- name: Ensure resolved.conf file
  copy: src=resolved.conf dest=/etc/systemd/resolved.conf
  notify: restart systemd-resolved

# Copy network configurations
- name: Set wan0 link name
  copy: src={{ item }} dest=/etc/systemd/network/
  notify: restart systemd-networkd
  with_items:
  - 00-lan0.link
  - 00-wan0.link
  - 01-internal.network
  - 01-external.network

# Setup iptable rules
- name: Configure iptables
  copy: src=iptables.rules dest=/etc/iptables/
  notify: [ 'restart iptables', 'restart ip6tables' ]

- name: Link iptable rules for v6 rules
  file: path=/etc/iptables/ip6tables.rules state=link src=/etc/iptables/iptables.rules

- name: Ensure iptables is enabled
  service: name=iptables enabled=yes state=started

# Setup and configure DHCP and DNS server
- name: Configure dnsmasq
  copy: src=dnsmasq.conf dest=/etc/
  notify: restart dnsmasq

- name: Ensure dnsmasq is enabled
  service: name=dnsmasq enabled=yes state=started

# Setup dhcpcd for DHCPv6-PD support
- name: Ensure dhcpcd.conf file
  copy: src=dhcpcd.conf dest=/etc/systemd/dhcpcd.conf
  notify: restart dhcpcd

- name: Ensure dhcpcd is enabled
  service: name=dhcpcd state=started enabled=yes

# Enable mosquito service for IoT messages
- name: Ensure mosquitto is enabled
  service: name=mosquitto enabled=yes state=started

# Configure rclone
- name: Ensure rclone backup configuration
  template: src=rclone.conf dest=/etc/rclone.conf

- name: Install rclone timer and service
  copy: src=rclone-sync.{{ item }} dest=/etc/systemd/system/
  with_items: [ timer, service ]

- name: Enable rclone timer service
  service: name=rclone-sync.timer enabled=yes state=started

# Configure NFS shares
- name: Enable nfs-server service
  service: name=nfs-server state=started enabled=yes

- name: Enable nfs rpcbind socket activation (nfs v2/3)
  service: name=rpcbind.socket enabled=yes

- name: Ensure documents device is exported
  copy: src=exports dest=/etc/exports
  notify: reload nfs exports

# Configure nginx server
- name: Enable nginx server
  service: name=nginx state=started enabled=yes

- name: Ensure nginx server configuration
  copy: src=nginx.conf dest=/etc/nginx/
  notify: reload nginx

- name: Encrypt transmission basic-auth password
  htpasswd: path=/etc/nginx/htpasswd_transmission
            mode=600
            owner=http
            name=evan
            password={{ transmission_rpc_password }}

# Configure transmission
- name: Ensure transmission configuration directory exists
  file: path=/home/evan/.config/transmission-daemon state=directory

- name: Ensure transmission runs as "evan"
  copy: src=transmission-user.conf dest=/etc/systemd/system/transmission.service.d/

- name: Ensure transmission configuration
  copy: src=transmission-settings.json dest=/home/evan/.config/transmission-daemon/settings.json
  notify: reload transmission

- name: Enable transmission daemon
  service: name=transmission state=started enabled=yes

# Configure home-assistant
- name: Ensure hass config directory exists
  file: path=/var/lib/hass state=directory

- name: Ensure hass configuration
  copy: src=home-assistant.yaml dest=/var/lib/hass/configuration.yaml
  notify: restart home-assistant

- name: Ensure hass secrets
  template: src=home-assistant-secrets.yaml dest=/var/lib/hass/secrets.yaml
  notify: restart home-assistant

- name: Ensure home-assistant docker service
  docker_container:
    name: home-assistant
    image: homeassistant/home-assistant
    init: yes
    network_mode: host
    volumes:
      - '/var/lib/hass:/config'
      - '/var/lib/hass/.ssh:/root/.ssh'
      - '/etc/localtime:/etc/localetime:ro'

# Enable waitress file server
- name: ensure waitress config
  copy: src=waitress.conf dest=/etc/waitress.conf
  notify: restart waitress

- name: Enable waitress service
  service: name=waitress state=started enabled=yes

# Enable prolink-server
- name: Enable prolink-server service
  service: name=prolink-server state=started enabled=yes

# Configure DNS entires in cloudflare
- name: Ensuring DNS entries
  with_items: "{{ lookup('file', 'files/dns_records.yml') | from_yaml }}"
  cloudflare_dns:
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"

    state: present
    zone: evanpurkhiser.com
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    proxied: "{{ item.proxied | default('no') }}"
    content: "{{ item.content }}"
