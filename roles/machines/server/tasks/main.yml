---
- import_role: name=common
- import_role: name=pacsync
- import_role: name=systemd-timesyncd

- import_role: name=personal-repo
  vars: { server_path: "file:///srv/pkgs" }

# Bootstrap personal packages repo
- name: Install rkt
  pacman: name=rkt

- name: Ensure personal packages repo directory exists
  file: path=/srv/pkgs state=directory

- name: Bootstrapping personal packages
  shell: |
    package="{{ item }}"
    cd "$(mktemp -d)"
    git clone https://github.com/EvanPurkhiser/PKGBUILDs.git .
    # TODO: Figure out how to make this happen with rkt
    #rkt run -e EXPORT_PKG=1 -v "$PWD/$package":/pkg docker://whynothugo/makepkg
    mv "$PWD/$package"/*.pkg.tar.xz /srv/pkgs && cd && rm -r "$OLDPWD"
  args:
    creates: /srv/pkgs/{{ item }}*.pkg.tar.xz
  notify:
  - sync personal repo database
  - sync pacman cache
  with_items:
  - media-center-automation
  - waitress-git

# Flush handlers to ensure new personal packages are synced into the database
- meta: flush_handlers

# Setup ZFS repo
- name: Add arch ZFS repo
  copy: src=archzfs-repo dest=/etc/pacman.d

- name: Include archzfs repo in pacman.conf
  lineinfile: dest=/etc/pacman.conf line="Include = /etc/pacman.d/archzfs-repo"
  notify: sync pacman cache

- name: Install required packages
  pacman:
    name:
    - archzfs-linux
    - bash-completion
    - dhcpcd
    - dnsmasq
    - mosquitto
    - neovim
    - nfs-utils
    - nginx
    - rclone
    - rkt
    - rsync
    - transmission-cli
    - waitress-git
    - wget

    # Required for encrypting the transmission basic auth password
    - python-passlib

- import_tasks: network.yml
- import_tasks: rclone.yml

# Configure udev rules for the zigbee / zwave adapter
- name: Ensure zigbee / zwave rules
  copy: src=99-usb-gocontrol.rules dest=/etc/udev/rules.d/
  notify: udev reload

# Configure NFS shares
- name: Enable nfs-server service
  service: name=nfs-server state=started enabled=yes
  tags: [nfs]

- name: Enable nfs rpcbind socket activation (nfs v2/3)
  service: name=rpcbind.socket enabled=yes
  tags: [nfs]

- name: Ensure documents device is exported
  copy: src=exports dest=/etc/exports
  notify: reload nfs exports
  tags: [nfs]

# Configure nginx server
- name: Enable nginx server
  service: name=nginx state=started enabled=yes
  tags: [nginx]

- name: Ensure nginx server configuration
  copy: src=nginx.conf dest=/etc/nginx/
  notify: reload nginx
  tags: [nginx]

- name: Encrypt transmission basic-auth password
  htpasswd: path=/etc/nginx/htpasswd_transmission
            mode=600
            owner=http
            name=evan
            password={{ transmission_rpc_password }}
  tags: [nginx]

# Configure transmission
- name: Ensure transmission configuration directory exists
  file: path=/home/evan/.config/transmission-daemon state=directory
  tags: [transmission]

- name: Ensure transmission runs as "evan"
  copy: src=transmission-user.conf dest=/etc/systemd/system/transmission.service.d/
  tags: [transmission]

- name: Ensure transmission configuration
  copy: src=transmission-settings.json dest=/home/evan/.config/transmission-daemon/settings.json
  notify: reload transmission
  tags: [transmission]

- name: Enable transmission daemon
  service: name=transmission state=started enabled=yes
  tags: [transmission]

# Enable mosquito service for IoT messages
- name: Ensure mosquitto is enabled
  service: name=mosquitto enabled=yes state=started
  tags: [hass]

# Configure home-assistant
- name: Ensure hass config directory exists
  file: path=/var/lib/hass state=directory
  tags: [hass]

- name: Ensure hass Lutron certs
  with_items:
    - { key: caseta_crt, path: /var/lib/hass/caseta.crt }
    - { key: caseta_key, path: /var/lib/hass/caseta.key }
    - { key: caseta_bridge_crt, path: /var/lib/hass/caseta-bridge.crt }
  copy: content="{{ lutron[item.key] }}" dest="{{ item.path }}"
  notify: restart home-assistant
  tags: [hass]

- name: Ensure hass configuration
  copy: src=home-assistant.yaml dest=/var/lib/hass/configuration.yaml
  notify: restart home-assistant
  tags: [hass]

- name: Ensure hass UI configuration
  copy: src=hass-lovelace.yaml dest=/var/lib/hass/ui-lovelace.yaml
  tags: [hass, hass-ui]

- name: Ensure hass secrets
  template: src=home-assistant-secrets.yaml dest=/var/lib/hass/secrets.yaml
  notify: restart home-assistant
  tags: [hass]

- name: Ensure home-assistant service file
  copy: src=systemd/home-assistant.service dest=/etc/systemd/system/
  notify: systemd daemon-reload
  tags: [hass]

- name: Enable home-assistant
  service: name=home-assistant state=started enabled=yes
  tags: [hass]

# Enable waitress file server
- name: ensure waitress config
  copy: src=waitress.conf dest=/etc/waitress.conf
  notify: restart waitress

- name: Enable waitress service
  service: name=waitress state=started enabled=yes

# Configure DNS entires in cloudflare
- name: Ensuring DNS entries
  tags: [dns]
  with_items: "{{ lookup('file', 'files/dns_records.yml') | from_yaml }}"
  cloudflare_dns:
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"

    state: present
    zone: evanpurkhiser.com
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    proxied: "{{ item.proxied | default('no') }}"
    content: "{{ item.content }}"
